import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import { useContext, useEffect, useState } from "react";
import { GameContext } from "@/context/GameContext";
import { db } from "@/firebase/config";
import { doc, getDoc } from "firebase/firestore";
import { AuthContext } from "@/context/AuthContext";
import {
  Destination,
  PlanetContainer,
  StarContainer,
} from "@/styles/components/planet";
import { AsideDestination, Container, Orbit, Wrapper } from "@/styles/home";
import { generateStarSystem } from "@/utils/create-star-system";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const { user } = useContext(AuthContext);
  const {
    character,
    setNewCharacter,
    leavePlanet,
    location,
    goToPlanet,
    updateLocation,
    goToSatelite,
    leaveSatelite,
    goToStar,
  } = useContext(GameContext);
  //const [location, setLocation] = useState<any | null>(null);
  const [inPlanet, setInPlanet] = useState<any | null>(null);
  const [inSatelite, setInSatelite] = useState<any | null>(null);
  const [inPlanetLocation, setInPlanetLocation] = useState<any | null>(null);

  function handleGoToPlanet(p: any, i: number) {
    goToPlanet(i);
    setInPlanet(p);
  }
  function handleGoToSatelite(m: any, i: number) {
    goToSatelite(i);
    setInSatelite(m);
  }
  function handleLeaveLocation() {
    if (inPlanetLocation) {
      //setInSatelite(null);
      //leaveSatelite();
      return;
    }
    if (inSatelite) {
      setInSatelite(null);
      leaveSatelite();
      return;
    }
    leavePlanet();
    setInPlanet(null);
  }

  useEffect(() => {
    async function fetchCharacter() {
      if (!user) {
        return;
      }
      const docRef = doc(db, "users", user.uid);
      const docSnap = await getDoc(docRef);

      if (docSnap.exists()) {
        setNewCharacter(docSnap.data().character);
      } else {
        console.log("No such document!");
      }
    }
    fetchCharacter();
  }, [user]);

  useEffect(() => {
    async function getCharPos() {
      if (!character) {
        return;
      }
      const docRef = doc(db, "galaxy", character.star);
      const docSnap = await getDoc(docRef);

      if (docSnap.exists()) {
        updateLocation(docSnap.data());
        if (character.planet != 500) {
          setInPlanet(docSnap.data().planets[character.planet]);
        }
        if (character.satelite && character.satelite != 500) {
          setInSatelite(
            docSnap.data().planets[character.planet].satelites[
              character.satelite
            ]
          );
        }
      } else {
      }
    }
    getCharPos();
  }, [character]);

  return (
    <>
      <Head>
        <title>Rpg</title>
        <meta name="Fantasy Rpg" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Wrapper>
        {!inPlanet ? (
          <>
            {location &&
              location.leftDestination &&
              location.leftDestination != "" && (
                <AsideDestination
                  onClick={() => goToStar(location.leftDestination)}
                >
                  <Destination type={"star"} />
                </AsideDestination>
              )}
            {/* <button onClick={generateStarSystem}>‚≠ê</button> */}
            <Container>
              <Orbit>
                {location && <StarContainer title={location.name} />}
                {location &&
                  location.planets.map((p: any, i: number) => {
                    return (
                      <PlanetContainer
                        onClick={() => handleGoToPlanet(p, i)}
                        key={i}
                        title={p.name}
                        orbit={p.orbit}
                        type={p.type ? p.type : "rock"}
                      />
                    );
                  })}
              </Orbit>
            </Container>
            {location &&
              location.rightDestination &&
              location.rightDestination != "" && (
                <AsideDestination
                  onClick={() => goToStar(location.rightDestination)}
                >
                  <Destination type={"star"} />
                </AsideDestination>
              )}
          </>
        ) : (
          <>
            <Container>
              <PlanetContainer
                title={!inSatelite ? inPlanet.name : inSatelite.name}
                orbit={"display"}
                disabled={true}
                type={inPlanet.type ? inPlanet.type : "rock"}
              />
              {!inSatelite &&
                inPlanet.satelites &&
                inPlanet.satelites.lenght != 0 &&
                inPlanet.satelites.map((m: any, i: number) => {
                  return (
                    <PlanetContainer
                      onClick={() => handleGoToSatelite(m, i)}
                      key={i}
                      title={m.name}
                      orbit={"lg"}
                      color={"gray"}
                      type={m.type ? m.type : "rock"}
                    />
                  );
                })}
              <button onClick={handleLeaveLocation}>üöÄ</button>
            </Container>
          </>
        )}
      </Wrapper>
    </>
  );
}
